syntax = "proto3";

import "google/protobuf/any.proto";

package apis;

// EndpointType defines supported endpoints' types
enum EndpointType {
  UNKNOWN = 0;
  IPV4 = 1;
  IPV6 = 2;
  SID = 3;
}

// Errors defines error codes which a gateway can return to a client
enum GatewayErrors {
  OK = 0;
  // Returned when a gateway encountered a generic error
  EIO = 1;
  // Returned when request key does not exist
  ENOENT = 2;
  // Returned when an operation triggered by the client's requested timed out
  // and was canceled
  ETIMEDOUT = 3;
  // Returned when a gateway cannot reach a DB host
  EHOSTDOWN = 4;
}
// endpoint is an object defining a source or a destination of a communication
// path. The type of the endpoint is defined by EndpointType, it can be ipv4,
// ipv6 addresses or segment routing SIDs etc. The list of supported endpoint
// types may be extended in future. The address of endpoint is stored in a slice
// of bytes and should be decoded according to the endpoint type.
message endpoint {
  EndpointType type = 1;
  bytes address = 2;
}
// latency defines one of available QoE metrics
// value expresses latency value in milliseconds.
// variation expresses percent of the acceptable variation from value.
message latency {
  int32 value = 1;
  int32 variation = 2;
}
// qoe_parameters defines a list of QoE parameters a client can request.
// Currently only latency is supported.
message qoe_parameters { latency latency = 1; }
message qoe {
  endpoint src = 1;
  endpoint dst = 2;
  qoe_parameters qoe = 3;
  repeated uint32 label = 4;
  GatewayErrors err = 5;
}
// RequestQoE defines the rpc message sent by the client to the gateway.
// Multiple Src/Dst/QoE are supported in a single request.
message RequestQoE { map<int32, qoe> qoes = 1; }
// ResponseQoE defines  the rpc message sent as a reply to the client.
// it is the same message as request, but the gateway populates labels and
// err for each qoe.
message ResponseQoE { map<int32, qoe> qoes = 1; }

message RouteDistinguisherTwoOctetAS {
  uint32 admin = 1;
  uint32 assigned = 2;
}
message RouteDistinguisherIPAddress {
  string admin = 1;
  uint32 assigned = 2;
}
message RouteDistinguisherFourOctetAS {
  uint32 admin = 1;
  uint32 assigned = 2;
}
message TwoOctetAsSpecificExtended {
  bool is_transitive = 1;
  uint32 sub_type = 2;
  uint32 as = 3;
  uint32 local_admin = 4;
}

message IPv4AddressSpecificExtended {
  bool is_transitive = 1;
  uint32 sub_type = 2;
  string address = 3;
  uint32 local_admin = 4;
}

message FourOctetAsSpecificExtended {
  bool is_transitive = 1;
  uint32 sub_type = 2;
  uint32 as = 3;
  uint32 local_admin = 4;
}

message Prefix {
  bytes address = 1;
  uint32 mask_length = 2;
}
// RequestVPN call used to request L3 VPN entries, identified by one Route
// Distinguisher which can be one of listed below types, and one or more Route
// Targets.
message RequestVPN {
  // Route Distinguisher must be one of
  // RouteDistinguisherTwoOctetAS,
  // RouteDistinguisherIPAddressAS,
  // or RouteDistinguisherFourOctetAS.
  google.protobuf.Any rd = 1;
  // List of the Route Targets. Each must be one of
  // TwoOctetAsSpecificExtended,
  // IPv4AddressSpecificExtended,
  // or FourOctetAsSpecificExtended.
  repeated google.protobuf.Any rt = 2;
  // vpn_prefix is L3 VPN prefix which vpn label is requested for.
  Prefix vpn_prefix = 3;
}

message ResponseVPNEntry {
  // Route Distinguisher must be one of
  // RouteDistinguisherTwoOctetAS,
  // RouteDistinguisherIPAddressAS,
  // or RouteDistinguisherFourOctetAS.
  google.protobuf.Any rd = 1;
  // List of the Route Targets. Each must be one of
  // TwoOctetAsSpecificExtended,
  // IPv4AddressSpecificExtended,
  // or FourOctetAsSpecificExtended.
  repeated google.protobuf.Any rt = 2;
  uint32 label = 3;
}

// GatewayService lists rpc services supported by the gateway api
service GatewayService {
  // API to request specified Quality of Experience
  rpc QoE(RequestQoE) returns (ResponseQoE);
  // API to request L3 VPN label for specified VRF, identified by Route
  // Distinguisher
  rpc VPN(RequestVPN) returns (stream ResponseVPNEntry);
}