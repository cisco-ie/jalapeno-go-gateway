syntax = "proto3";

package apis;

// EndpointType defines supported endpoints' types
enum EndpointType {
  UNKNOWN = 0;
  IPV4 = 1;
  IPV6 = 2;
  SID = 3;
}

// Errors defines error codes which a gateway can return to a client
enum GatewayErrors {
  OK = 0;
  // Returned when a gateway encountered a generic error
  EIO = 1;
  // Returned when request key does not exist
  ENOENT = 2;
  // Returned when an operation triggered by the client's requested timed out
  // and was canceled
  ETIMEDOUT = 3;
  // Returned when a gateway cannot reach a DB host
  EHOSTDOWN = 4;
}
// endpoint is an object defining a source or a destination of a communication path. 
// The type of the endpoint is defined by EndpointType, it can be ipv4, ipv6 addresses or segment routing SIDs etc.
// The list of supported endpoint types may be extended in future.
// The address of endpoint is stored in a slice of bytes and should be decoded according to the endpoint type.
message endpoint {
  EndpointType type = 1;
  bytes address = 2;
}
// latency defines one of available QoE metrics
// value expresses latency value in milliseconds.
// variation expresses percent of the acceptable variation from value.
message latency {
  int32 value = 1;
  int32 variation = 2;
}
// qoe_parameters defines a list of QoE parameters a client can request.
// Currently only latency is supported.
message qoe_parameters { latency latency = 1; }
message qoe {
  endpoint src = 1;
  endpoint dst = 2;
  qoe_parameters qoe = 3;
  repeated uint32 label = 4;
  GatewayErrors err = 5;
}
// RequestQoE defines the rpc message sent by the client to the gateway.
// Multiple Src/Dst/QoE are supported in a single request.
message RequestQoE { map<int32, qoe> qoes = 1; }
// ResponseQoE defines  the rpc message sent as a reply to the client.
// it is the same message as request, but the gateway populates labels and
// err for each qoe.
message ResponseQoE { map<int32, qoe> qoes = 1; }

// Borrowed from gobgp project
//
// Route Distinguisher is expressed by 2 bytes Autonomous System
message RouteDistinguisherTwoOctetAS {
    uint32 admin = 1;
    uint32 assigned = 2;
}
// Route Distinguisher is expressed by IP address
message RouteDistinguisherIPAddress {
    string admin = 1;
    uint32 assigned = 2;
}
// Route Distinguisher is expressed by 4 bytes Autonomous System
message RouteDistinguisherFourOctetAS {
    uint32 admin = 1;
    uint32 assigned = 2;
}
// RequestVPNLabel defines the rpc message which is sent by the client to the Gateway
// to request Layer3 VPN label for the corresponding Route Distinguisher.
message RequestVPNLabel {
  oneof rd_type {
    RouteDistinguisherTwoOctetAS rd2as = 1;
    RouteDistinguisherIPAddress rdIPAddr = 2;
    RouteDistinguisherFourOctetAS rd4as = 3;
  } 
}
// ResponseVPNLabel defines the rpc message which is sent by the Gateway to the client
// in response to RequestVPNLabel. If VPN label is not found, the error will be returned.
message ResponseVPNLabel {
    repeated uint32 label = 1;
    GatewayErrors err = 2;
}

service GatawayServices {
    // API to request specified Quality of Experience
    rpc QoE(RequestQoE) returns (ResponseQoE); 
    // API to request L3 VPN label for specified VRF, identified by Route Distinguisher
    rpc VPN(RequestVPNLabel) returns (ResponseVPNLabel);
}